buildscript {
    repositories {
        mavenLocal()
        gradlePluginPortal()
        mavenCentral()
        jcenter()
//        maven {
//            url "https://repo.spring.io/libs-milestone"
//            mavenContent { releasesOnly() }
//        }
//        maven {
//            url "https://repo.spring.io/libs-snapshot"
//            mavenContent { snapshotsOnly() }
//        }
//        maven {
//            url "https://plugins.gradle.org/m2/"
//            mavenContent { releasesOnly() }
//        }
    }
    dependencies {
        classpath "de.undercouch:gradle-download-task:${project.gradleDownloadTaskVersion}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${project.springBootVersion}"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:${project.jibVersion}"
        classpath "io.freefair.gradle:maven-plugin:${project.gradleMavenPluginVersion}"
        classpath "io.freefair.gradle:lombok-plugin:${project.gradleLombokPluginVersion}"
        classpath 'org.owasp:dependency-check-gradle:6.1.1'
        classpath 'net.saliman:gradle-properties-plugin:1.5.1'
    }
}

apply plugin: 'net.saliman.properties'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        mavenContent { releasesOnly() }
        url "${privateMavenRepoRelease}"
    }
    maven {
        url "${privateMavenRepoSnapshot}"
        mavenContent { snapshotsOnly() }
    }
//    maven {
//        url "https://oss.sonatype.org/content/repositories/snapshots"
//        mavenContent { snapshotsOnly() }
//    }
//    maven {
//        mavenContent { releasesOnly() }
//        url "https://build.shibboleth.net/nexus/content/repositories/releases/"
//    }
//    maven {
//        mavenContent { releasesOnly() }
//        url "https://repo.spring.io/milestone/"
//    }
//    maven {
//        url "https://repo.spring.io/snapshot/"
//        mavenContent { snapshotsOnly() }
//    }
//    maven {
//        mavenContent { snapshotsOnly() }
//        url "https://oss.jfrog.org/artifactory/oss-snapshot-local"
//    }
}

def casServerVersion = project.'cas.version'

project.group = 'gov.noaa.ncei.cmg'
project.version = casServerVersion + '.' + project.'ncei.version'

def casWebApplicationBinaryBaseName = project.name + "-" + project.version
def casWebApplicationBinaryName = casWebApplicationBinaryBaseName + '-exe.war'

project.ext."casServerVersion" = casServerVersion
project.ext."casWebApplicationBinaryName" = casWebApplicationBinaryName

apply plugin: "io.freefair.war-overlay"
apply plugin: "io.freefair.lombok"
apply from: rootProject.file("gradle/tasks.gradle")

apply plugin: "war"
apply plugin: "eclipse"
apply plugin: "idea"

apply from: rootProject.file("gradle/springboot.gradle")
apply from: rootProject.file("gradle/dockerjib.gradle")

apply plugin: 'distribution'
apply plugin: 'maven-publish'
apply plugin: 'org.owasp.dependencycheck'

dependencies {
    // Add modules in format compatible with overlay casModules property
    if (project.hasProperty("casModules")) {
        def dependencies = project.getProperty("casModules").split(",")
        dependencies.each {
            def projectsToAdd = rootProject.subprojects.findAll {project ->
                project.name == "cas-server-core-${it}" || project.name == "cas-server-support-${it}"
            }
            projectsToAdd.each {implementation it}
        }
    }
    // CAS dependencies/modules may be listed here statically...
    implementation "org.apereo.cas:cas-server-webapp-init:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-eureka-client:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-jpa-ticket-registry:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-git-service-registry:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-jdbc:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-jdbc-drivers:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-ldap:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-oidc:${casServerVersion}"
    implementation "org.apereo.cas:cas-server-support-configuration-cloud-kafka:${casServerVersion}"
    implementation "gov.noaa.ncei.cmg.cas:cas-server-support-discovery-rest-authentication:${casServerVersion}.1-SNAPSHOT"
    implementation "gov.noaa.ncei.cmg.cas:cas-server-support-custom-filter:${casServerVersion}.1-SNAPSHOT"


//    Fix Version Conflicts
    implementation('org.springframework.integration:spring-integration-core') {
        version {
            strictly '5.3.6.RELEASE'
        }
    }
    implementation('org.springframework.integration:spring-integration-amqp') {
        version {
            strictly '5.3.6.RELEASE'
        }
    }

//    Security vulnerability updates
    implementation group: 'org.springframework.security', name: 'spring-security-core', version: '5.4.5'
    implementation group: 'org.springframework.security', name: 'spring-security-cas', version: '5.4.5'
    implementation group: 'org.springframework.security', name: 'spring-security-config', version: '5.4.5'
    implementation group: 'org.springframework.security', name: 'spring-security-crypto', version: '5.4.5'
    implementation group: 'org.springframework.security', name: 'spring-security-web', version: '5.4.5'
    implementation group: 'io.netty', name: 'netty-transport', version: '4.1.59.Final'
    implementation group: 'io.netty', name: 'netty-codec-http', version: '4.1.59.Final'
    implementation group: 'io.netty', name: 'netty-transport-native-epoll', version: '4.1.59.Final'
    implementation group: 'io.netty', name: 'netty-buffer', version: '4.1.59.Final'
    implementation group: 'io.netty', name: 'netty-codec', version: '4.1.59.Final'
    implementation group: 'io.netty', name: 'netty-common', version: '4.1.59.Final'
    implementation group: 'io.netty', name: 'netty-handler', version: '4.1.59.Final'
    implementation group: 'io.netty', name: 'netty-resolver', version: '4.1.59.Final'
    implementation group: 'io.netty', name: 'netty-transport-native-epoll', version: '4.1.59.Final', classifier: 'linux-x86_64'
    implementation group: 'io.netty', name: 'netty-transport-native-kqueue', version: '4.1.59.Final', classifier: 'osx-x86_64'
    implementation group: 'io.netty', name: 'netty-transport-native-unix-common', version: '4.1.59.Final'


    implementation group: 'com.thoughtworks.xstream', name: 'xstream', version: '1.4.15'
    implementation group: 'com.netflix.hystrix', name: 'hystrix-core', version: '1.4.26'
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    implementation group: 'org.apache.shiro', name: 'shiro-cache', version: '1.7.1'
    implementation group: 'org.apache.shiro', name: 'shiro-config-core', version: '1.7.1'
    implementation group: 'org.apache.shiro', name: 'shiro-config-ogdl', version: '1.7.1'
    implementation group: 'org.apache.shiro', name: 'shiro-core', version: '1.7.1'
    implementation group: 'org.apache.shiro', name: 'shiro-crypto-cipher', version: '1.7.1'
    implementation group: 'org.apache.shiro', name: 'shiro-crypto-core', version: '1.7.1'
    implementation group: 'org.apache.shiro', name: 'shiro-crypto-hash', version: '1.7.1'
    implementation group: 'org.apache.shiro', name: 'shiro-event', version: '1.7.1'
    implementation group: 'org.apache.shiro', name: 'shiro-lang', version: '1.7.1'



//    shiro-config-core-1.7.0.jar
//    shiro-config-ogdl-1.7.0.jar
//    shiro-crypto-cipher-1.7.0.jar
//    shiro-crypto-core-1.7.0.jar
//    shiro-crypto-hash-1.7.0.jar



}

tasks.findByName("jibDockerBuild")
    .dependsOn(copyWebAppIntoJib, copyConfigIntoJib)
    .finalizedBy(deleteWebAppFromJib)

tasks.findByName("jib")
    .dependsOn(copyWebAppIntoJib, copyConfigIntoJib)
    .finalizedBy(deleteWebAppFromJib)

configurations.all {
    resolutionStrategy {
        cacheChangingModulesFor 0, "seconds"
        cacheDynamicVersionsFor 0, "seconds"

        preferProjectModules()

        def failIfConflict = project.hasProperty("failOnVersionConflict") && Boolean.valueOf(project.getProperty("failOnVersionConflict"))
        if (failIfConflict) {
            failOnVersionConflict()
        }
    }
}

eclipse {
    classpath {
       downloadSources = true
       downloadJavadoc = true
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

distTar {
    compression = Compression.GZIP
    archiveExtension = "tar.gz"
}

distributions {
    main {
        distributionBaseName = 'cas'
        contents {
            into('') {
                File.createTempDir().with {
                    def tmpLog = new File(absolutePath, 'log')
                    println tmpLog.absolutePath
                    tmpLog.mkdirs()
                    from (absolutePath) {
                        includeEmptyDirs = true
                    }
                }
            }
            into('svc/') {
                from 'dist/svc'
                include '*.properties'
                fileMode = 0660
            }
            into('svc/') {
                from 'dist/svc'
                include '**/*.service'
                fileMode = 0440
            }
            into('svc/') {
                from 'dist/svc'
                include '*.sh'
                fileMode = 0550
            }
            into('doc/') {
                from 'dist/doc'
                include '*.md'
                fileMode = 0440
            }
            into('config/') {
                from 'dist/config'
                include '*.properties'
                include '*.options'
                include '*.xml'
                fileMode = 0660
            }
            into('') {
                from 'dist'
                include '*.sh'
                fileMode = 0550
            }
            into('') {
                from 'build/libs/' + casWebApplicationBinaryName
            }
        }
    }
}


publishing {
    publications {
        maven(MavenPublication) {
            artifact(distZip) {
                extension "zip"
            }
            artifact(distTar) {
                extension "tar.gz"
            }
            artifact(distTar) {
                extension "war"
                classifier "exe"
            }
        }
    }
    repositories {
        maven {
            credentials {
                username "${publishUser}"
                password "${publishPassword}"
            }
            url = version.endsWith('SNAPSHOT') ? "${publishSnapshotUrl}" : "${publishReleaseUrl}"
        }
    }
}

processResources {
    with copySpec {
        into('docker') {
            from 'docker'
            filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                    finalName: casWebApplicationBinaryBaseName
            ]
        }
    }
}

dependencyCheck {
    failBuildOnCVSS=0
    suppressionFile='owasp-dep-check-suppression.xml'
}

